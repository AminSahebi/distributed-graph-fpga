-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sssp_kernel_0_PE_kernel_1_Pipeline_write_distances is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    distance_buffer_0_31_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_4_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_5_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_6_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_7_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_8_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_9_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_10_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_11_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_12_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_13_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_14_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_15_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_16_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_17_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_18_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_19_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_20_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_21_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_22_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_23_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_24_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_25_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_26_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_27_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_28_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_29_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_30_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    distance_buffer_31_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    local_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    local_out_ce0 : OUT STD_LOGIC;
    local_out_we0 : OUT STD_LOGIC;
    local_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sssp_kernel_0_PE_kernel_1_Pipeline_write_distances is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln47_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln47_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_96 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln47_fu_319_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_334_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_334_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sssp_kernel_0_mux_325_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sssp_kernel_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_325_32_1_1_U165 : component sssp_kernel_0_mux_325_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => distance_buffer_0_31_reload,
        din1 => distance_buffer_1_3_reload,
        din2 => distance_buffer_2_3_reload,
        din3 => distance_buffer_3_3_reload,
        din4 => distance_buffer_4_3_reload,
        din5 => distance_buffer_5_3_reload,
        din6 => distance_buffer_6_3_reload,
        din7 => distance_buffer_7_3_reload,
        din8 => distance_buffer_8_3_reload,
        din9 => distance_buffer_9_3_reload,
        din10 => distance_buffer_10_3_reload,
        din11 => distance_buffer_11_3_reload,
        din12 => distance_buffer_12_3_reload,
        din13 => distance_buffer_13_3_reload,
        din14 => distance_buffer_14_3_reload,
        din15 => distance_buffer_15_3_reload,
        din16 => distance_buffer_16_3_reload,
        din17 => distance_buffer_17_3_reload,
        din18 => distance_buffer_18_3_reload,
        din19 => distance_buffer_19_3_reload,
        din20 => distance_buffer_20_3_reload,
        din21 => distance_buffer_21_3_reload,
        din22 => distance_buffer_22_3_reload,
        din23 => distance_buffer_23_3_reload,
        din24 => distance_buffer_24_3_reload,
        din25 => distance_buffer_25_3_reload,
        din26 => distance_buffer_26_3_reload,
        din27 => distance_buffer_27_3_reload,
        din28 => distance_buffer_28_3_reload,
        din29 => distance_buffer_29_3_reload,
        din30 => distance_buffer_30_3_reload,
        din31 => distance_buffer_31_3_reload,
        din32 => tmp_31_fu_334_p33,
        dout => tmp_31_fu_334_p34);

    flow_control_loop_pipe_sequential_init_U : component sssp_kernel_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_2_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln47_fu_313_p2 = ap_const_lv1_0)) then 
                    j_2_fu_96 <= add_ln47_fu_319_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_2_fu_96 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln47_fu_319_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln47_fu_313_p2, ap_start_int)
    begin
        if (((icmp_ln47_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_state1, j_2_fu_96, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_j <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j <= j_2_fu_96;
        end if; 
    end process;

    icmp_ln47_fu_313_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv6_20) else "0";
    local_out_address0 <= zext_ln47_fu_325_p1(5 - 1 downto 0);

    local_out_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            local_out_ce0 <= ap_const_logic_1;
        else 
            local_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_out_d0 <= tmp_31_fu_334_p34;

    local_out_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln47_fu_313_p2, ap_start_int)
    begin
        if (((icmp_ln47_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            local_out_we0 <= ap_const_logic_1;
        else 
            local_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_31_fu_334_p33 <= ap_sig_allocacmp_j(5 - 1 downto 0);
    zext_ln47_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j),64));
end behav;
